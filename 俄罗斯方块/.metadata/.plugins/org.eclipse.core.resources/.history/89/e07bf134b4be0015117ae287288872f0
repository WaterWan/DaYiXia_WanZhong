package water.eluosifangkuai.ui;

import java.awt.Graphics;
import java.lang.reflect.Constructor;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import water.eluosifangkuai.config.ConfigFactory;
import water.eluosifangkuai.config.GameConfig;
import water.eluosifangkuai.config.LayerConfig;

public class JPanelGame extends JPanel{

	
	private List<Layer> layers=null;
	
	public JPanelGame(){
		try {
		//获得游戏配置
		GameConfig cfg=ConfigFactory.getGameConfig();
		//获得层配置
		List<LayerConfig> layersCfg=cfg.getLayersConfig();
		//创建游戏层数组
		layers=new ArrayList<Layer>(layersCfg.size());
		//创建所有层对象
	for(LayerConfig layerCfg : layersCfg){
		//获得类对象。		
		Class<?> cls=Class.forName(layerCfg.getClassName());
		//获得构造函数。
		Constructor<?> ctr=cls.getConstructor(int.class,int.class,int.class,int.class);
		//调用构造函数创建类对象
		Layer l=(Layer)ctr.newInstance(
				layerCfg.getX(),
				layerCfg.getY(),
				layerCfg.getW(),
				layerCfg.getH()
				);
		//把创建的Layer对象放入集合。
		layers.add(l);
	
		}		
	} catch (Exception e) {
		e.printStackTrace();
	}
	
	
	
	
	
	
	
	}
	
	
	
	@Override
	public void paintComponent(Graphics g){

		//循环刷新游戏画面
		for(int i=0;i<layers.size();i++){
			//刷新层窗口
			layers.get(i).paint(g);
		}
	
	}
}


